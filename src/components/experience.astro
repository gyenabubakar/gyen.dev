---
import experience from '~/data/experience.json';
import { ChevronDownIcon } from '@lucide/astro';
---

<section class="mb-16">
  <h2 class="mb-8 text-2xl font-bold">Experience</h2>

  <div class="space-y-8">
    {
      experience.map((job, index) => (
        <article class="experience-item transform">
          <div class="flex items-start justify-between gap-4">
            <div class="flex flex-1 items-start gap-3">
              <div class="hidden sm:block [&>img]:size-12 [&>img]:object-contain">
                {job.logoDark ? (
                  <>
                    <img src={`/companies/${job.logo}`} alt={job.company} class="dark:hidden" />
                    <img
                      src={`/companies/${job.logoDark}`}
                      alt={job.company}
                      class="hidden dark:block"
                    />
                  </>
                ) : (
                  <img src={`/companies/${job.logo}`} alt={job.company} class="" />
                )}
              </div>

              <div class="flex-1">
                <div class="mb-2 sm:hidden [&>img]:size-12 [&>img]:object-contain">
                  {job.logoDark ? (
                    <>
                      <img src={`/companies/${job.logo}`} alt={job.company} class="dark:hidden" />
                      <img
                        src={`/companies/${job.logoDark}`}
                        alt={job.company}
                        class="hidden dark:block"
                      />
                    </>
                  ) : (
                    <img src={`/companies/${job.logo}`} alt={job.company} class="" />
                  )}
                </div>

                <h3 class="text-xl font-medium">{job.company}</h3>

                <p class="text-[15px]">
                  {job.role} Â· {job.startDate} - {job.endDate ?? 'Present'}
                </p>
              </div>
            </div>

            <button
              class="toggle-btn flex size-8 items-center justify-center rounded-full border border-black hover:bg-black hover:text-white dark:border-white dark:hover:bg-white dark:hover:text-black"
              data-index={index}
              aria-label="Toggle description"
              aria-expanded="false"
            >
              <ChevronDownIcon size={16} class="chevron" />
            </button>
          </div>

          <div class="description-wrapper max-h-0 overflow-hidden">
            <p class="pt-2 text-sm leading-relaxed text-neutral-600 sm:ml-[52px] dark:text-neutral-400">
              {job.description}
            </p>
          </div>
        </article>
      ))
    }
  </div>
</section>

<script>
  document.querySelectorAll('.toggle-btn').forEach((btn) => {
    const toggleBtn = btn as HTMLElement;
    let mouseX = 0;
    let mouseY = 0;
    let buttonX = 0;
    let buttonY = 0;

    toggleBtn.addEventListener('mouseenter', () => {
      const rect = toggleBtn.getBoundingClientRect();
      buttonX = rect.left + rect.width / 2;
      buttonY = rect.top + rect.height / 2;
    });

    toggleBtn.addEventListener('mousemove', (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
      const deltaX = (mouseX - buttonX) * 0.15;
      const deltaY = (mouseY - buttonY) * 0.15;
      toggleBtn.style.transform = `translate(${deltaX}px, ${deltaY}px)`;
    });

    toggleBtn.addEventListener('mouseleave', () => {
      toggleBtn.style.transform = '';
    });

    toggleBtn.addEventListener('click', () => {
      const article = toggleBtn.closest('.experience-item');
      const wrapper = article?.querySelector('.description-wrapper') as HTMLElement;
      const chevron = toggleBtn.querySelector('.chevron') as HTMLElement;

      if (wrapper && chevron) {
        const isOpen = wrapper.style.maxHeight && wrapper.style.maxHeight !== '0px';

        if (isOpen) {
          wrapper.style.maxHeight = '0';
          chevron.style.transform = 'rotate(0deg)';
          toggleBtn.setAttribute('aria-expanded', 'false');
        } else {
          wrapper.style.maxHeight = wrapper.scrollHeight + 'px';
          chevron.style.transform = 'rotate(180deg)';
          toggleBtn.setAttribute('aria-expanded', 'true');
        }
      }
    });
  });
</script>
